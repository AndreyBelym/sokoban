#pragma once
#include "LevelObjectFactory.h"

template <LevelObjectFactory::TypeNameFuncPtr type_name,
          LevelObjectFactory::CreatorFuncPtr creator>
class NestedRegistrator{
  public:  
    NestedRegistrator(){
        registered=LevelObjectFactory::registerType(type_name(),creator);
        count=0;
    }
    bool registered;
    unsigned count;
};

template <LevelObjectFactory::TypeNameFuncPtr type_name,
         LevelObjectFactory::CreatorFuncPtr creator>
class Registrator{
  public:
      Registrator(){
          reg.count++;
      }
      ~Registrator(){
          reg.count--;
      }
      unsigned registeredCount(){return reg.count;}
  private:
    volatile static NestedRegistrator<type_name,creator> reg;
};    

template <LevelObjectFactory::TypeNameFuncPtr type_name,
         LevelObjectFactory::CreatorFuncPtr creator>
volatile NestedRegistrator<type_name,creator>
       Registrator<type_name,creator>::reg; 
