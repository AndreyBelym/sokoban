#ifndef ARRAY_H
#define ARRAY_H
/*!Класс "динамический массив".*/
template <typename T>
class Array {
    private:
        T *data;//!<указатель-массив данных
        int size;//!<размер массива
    public:
        /*!Конструктор по умолчанию.*/
        Array();
        /*!Конструктор, выделяющий память под массив указанного размера.
         * \param len размер массива
         */
        explicit Array(const int len);
        /*!Конструктор, создающий объект, используя указатель на массив
         * и размер массива.
         * \param new_data указатель на копируемые данные
         * \param len размер массива
         */
        Array(const T *new_data,const int len);
        /*!Конструктор копирования.
         * \param other копируемый массив
         */
        Array(const Array& other);
        /*!Деструктор класса.*/
        ~Array();
        /*!Установка размера массива.
         * При изменении размера освобождается выделенная память,
         * и захватывается новая, что может привести к потере данных.
         * \param len размер массива
         */
        void setLen(const int len);
        /*!Получение текущего размера массива.
         * \return размер массива.
         */
        int len();
        /*!Получение ссылки на элемент массива.
         * \param n индекс элемента
         * \return ссылка на значение элемента
         */
        T& valueAt(int n);
        /*!Получение ссылки на элемент массива(версия для объекта-константы).
         * \param n индекс элемента
         * \return ссылка на значение элемента
         */
        const T& valueAt(int n) const;
        /*!Установка значения элемента массива.
         * \param n индекс элемента
         * \param value ссылка на значение элемента
         */
        void setValueAt(const int n, T value);
        /*! Получение из первых 2*n чисел (n - размер массива, целочисленно деленый пополам) данного массива (а) значения, равного min{a(1)+a(n+1),a(2)+a(n+2),...,a(n)+a(2n)} .
         * \return вычисленное значение
         */
        T findMin();        
        /*!Вывод массива на экран.*/
        void Print() const;
        /*!Копирование элементов другого массива по ссылке.
         * \param other копируемый массив
         */
        void Copy(const Array& other);
        /*!Перегруженный копирующий оператор присваивания.
         * \param other присваиваемый массив
         * \return данный список
         */
        Array& operator=(const Array& other);
        /*!Перегруженый оператор индексации - получение значения элемента
         * массива.
         * \param n индекс элемента
         * \return ссылка на значение элемента
         */
        T& operator[](const int n);
        /*!Перегруженый оператор индексации - получение значения элемента
         * массива(версия для объекта-константы).
         * \param n индекс элемента
         * \return ссылка на значение элемента
         */
        const T& operator[](const int n) const;
};
#include "Array.cpp"
#endif //ARRAY_H
