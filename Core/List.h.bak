#ifndef LIST_H
#define LIST_H
/*!Класс "односвязный список".*/
class List {
    private:
        /*!Тип "элемент списка".*/
        struct Elem{
            char c; //!<значение элемента списка
            Elem* next;//!<указатель на следующий элемент
        };
        Elem *first,//!<указатель на первый элемент списка
             *last;//!<указатель на последний элемент списка
        mutable Elem *current;//!<указатель на текущий элемент списка
    public:
        /*!Конструктор по умолчанию.*/
        List();
        /*!Конструктор по ASCIIZ строке.
         * \param source исходная строка
         */
        List(const char* source);
        /*!Конструктор копирования.
         * \param other копируемый список
         */
        List(const List& other);
        /*!Деструктор класса.*/
        ~List();
        /*!Установка значения по ASCIIZ строке.
         * \param source исходная строка
         */
        void FromChar(const char* source);
        /*!Метод добавления символа в конец списка.
         * \param new_char добавляемый символ
         */
        void Append(char new_char);
        /*!Метод добавления символа в начало списка.
         * \param new_char добавляемый символ
         */
        void Prepend(char new_char);
        /*!Вывод списка на экран.
         */
        void Print() const;
        /*!Изменяет позицию в списке с текущего элемента
         * на следующий за ним.
         */
        void Next() const;
        /*!Изменяет позицию в списке с текущего элемента
         * на начальный элемент.
         */
        void Reset() const;
        /*!Метод получения значения текущего элемента.
         * \return значение текущего элемента.
         */
        char Value() const;
        /*!Проверяет, достигнут ли конец списка.
         */
        bool isEnd() const;
        /*!Удаляет текущий элемент.
         * Текущим становится следующий после удаляемого
         * элемент.
         */
        void Delete();
        /*!Удаляет следующий после текущего элемент.*/
        void DeleteNext();
        /*!Вставляет новый элемент на место текущего.
         * Текущий элемент становится следующим после вставленного.
         * \param c добавляемый символ
         */
        void Insert(char c);
        /*!Вставляет новый элемент после текущего.
         * \param c добавляемый символ
         */
        void InsertNext(char c);
        /*!Очистка списка, удаление всех содержащихся в списке элементов.
         */
        void Clear();
        /*!Копирование другого списка.
         * \param other копируемый список
         */
        void Copy(const List&);
        /*!Перегрузка оператора присваивания.
         * \param other присваиваемый список
         * \return данный список
         */
        List& operator=(const List& other);
};

#endif //LIST_H
