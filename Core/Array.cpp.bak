#include <iostream>
#include <cstdlib>
//#include "Array.h"
using namespace std;
template <typename T>
Array<T>::Array():data(NULL),
               size(0)
{
}

template <typename T>
Array<T>::Array(const int len){
    if(len>0){
        size=len;
        try{
            data=new T[size];
        } catch (bad_alloc) {
            cerr<<"Memory allocation error!"<<endl;
            size=0;
            data=NULL;
        }
    } else {
        size=0;
        data=NULL;
    }
}

template <typename T>
Array<T>::Array(const T *new_data,const int len){
    if(len>0){
        size=len;
        try{
            data=new T[size];
        } catch (bad_alloc) {
            cerr<<"Memory allocation error!"<<endl;
            size=0;
            data=NULL;
        }
        for(int i=0;i<size;i++)
            data[i]=new_data[i];
    } else {
        size=0;
        data=NULL;
    }
}

template <typename T>
Array<T>::~Array(){
    delete[] data;
    size=0;
}

template <typename T>
void Array<T>::setLen(const int len){
    if(len>0){
        delete[] data;
        try{
            data=new T[len];
        } catch (bad_alloc) {
            cerr<<"Memory allocation error!"<<endl;
            size=0;
            data=NULL;
        }
        size=len;
    }
}

template <typename T>
int Array<T>::len(){
    return size;
}

template <typename T>
T& Array<T>::valueAt(int n){
    if(data&&n>=0&&n<size)
        return data[n];
    else 
        cerr<<"Index out of range!"<<endl;
    //else 
    //    return 0;
}

template <typename T>
const T& Array<T>::valueAt(int n) const{
    if(data&&n>=0&&n<size)
        return data[n];
    else 
        cerr<<"Index out of range!"<<endl;
    //else 
    //    return 0;
}

template <typename T>
void Array<T>::setValueAt(const int n, T value){
    if(data&&n>=0&&n<size)
        data[n]=value;
    else 
        cerr<<"Index out of range!"<<endl;
}

template <typename T>
T Array<T>::findMin(){
    int n=size/2;
    T min=data[0]+data[n],s;
    for(int i=1;i<n;++i){
        s=data[i]+data[i+n];
        if(s<min)
            min=s;
    }
    return min;
}

template <typename T>
void Array<T>::Print() const{
    for(int i=0;i<size-1;++i){
        cout<<data[i]<<",";
    };
    cout<<data[size-1]<<endl;
}

template <typename T>
void Array<T>::Copy(const Array& other){
    if(this==&other)
        return;
    delete[] data;
    size=other.size;
    try{
		data=new T[size];
	} catch (bad_alloc) {
		cerr<<"Memory allocation error!"<<endl;
		size=0;
		data=NULL;
		return;
	}
    for(int i=0;i<size;i++)
        data[i]=other.data[i];
}

template <typename T>
Array<T>& Array<T>::operator=(const Array& other){
    Copy(other);
    return *this;
}

template <typename T>
T& Array<T>::operator[] (int n){
    valueAt(n);
}

template <typename T>
const T& Array<T>::operator[] (int n) const{
    valueAt(n);
}

